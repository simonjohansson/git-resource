#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)
CREDS=$(mktemp $TMPDIR/google-creds.XXXXXX)

cat > $payload <&0

load_pubkey $payload
configure_https_tunnel $payload
configure_git_ssl_verification $payload
configure_credentials $payload

creds=$(jq -r '.source.creds // ""' < $payload)
bucket=$(jq -r '.source.bucket // ""' < $payload)
uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
repository=$(jq -r '.params.repository // ""' < $payload)
tag=$(jq -r '.params.tag // ""' < $payload)
tag_prefix=$(jq -r '.params.tag_prefix // ""' < $payload)
rebase=$(jq -r '.params.rebase // false' < $payload)
merge=$(jq -r '.params.merge // false' < $payload)
force=$(jq -r '.params.force // false' < $payload)
only_tag=$(jq -r '.params.only_tag // false' < $payload)
annotation_file=$(jq -r '.params.annotate // ""' < $payload)
notes_file=$(jq -r '.params.notes // ""' < $payload)

configure_git_global "${git_config_payload}"

echo $creds > $CREDS

cd $source
REF=`cat .git/ref`
metadata=$(git_metadata)

echo "Uploading to GCP"
cd ../
tar -cf $REF `basename $source`
generation=`write_file $bucket $REF $CREDS $REF`

version=$REF,$generation

jq -n "{
  version: {ref: $(echo $version | jq -R .)},
  metadata: $metadata
}" >&3
